library(survey)
library(srvyr)
library(readstata13)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(htmlTable)
library(ggthemr)
library(here)
library(hagenutils)
setwd(here())
rm(list = ls())
# Load dataset with multimorbidity variables
load("../../Data/Recoded Understanding Society Data/understanding_society_wave_9_and_10_with_mm_and_independent_variables.Rda")
setwd(here())
rm(list = ls())
# Load dataset with multimorbidity variables
load("../../Data/Recoded Understanding Society Data/understanding_society_wave_9_and_10_with_mm_and_independent_variables.Rda")
here()
setwd(here())
here()
?plot_gg()
library(rayshader)
?plot_gg()
library(sf)
library(tidyverse)
library(elevatr)
library(rayshader)
library(glue)
library(colorspace)
library(MetBrewer)
library(tigris)
library(stars)
library(R.utils)
st_d<- st_read("C:/Users/lrowley/OneDrive/Documents/Quantitative Research Projects/MLSOAs 2011 Super Generalised/Middle_Layer_Super_Output_Areas_(December_2011)_Boundaries_Super_Generalised_Clipped_(BSC)_EW_V3.shp")
st_d<- st_d%>%
filter(substr(MSOA11CD,1,1)=="W")
p<- ggplot(st_d)+
geom_sf(aes(fill = population))
p
df<- read.csv("C:/Users/lrowley/OneDrive/Documents/Quantitative Research Projects/MSOA Data/msoa_population_estimates_2019_data.csv")%>%
dplyr::select(MSOA.Code, Population)%>%
rename(MSOA11CD = MSOA.Code,
population = Population)
st_d<- left_join(st_d, df)
p<- ggplot(st_d)+
geom_sf(aes(fill = population))
p
class(st_d$population)
st_d<- st_d%>%
mutate(population = stringr::str_remove_all(population, ",")%>%
as.numeric())
p<- ggplot(st_d)+
geom_sf(aes(fill = population))
p
plot_gg(p, height_aes = "fill")
p<- ggplot(st_d)+
geom_sf(aes(fill = population), color = NA)
p
plot_gg(p, height_aes = "fill")
plot_gg(p, height_aes = "fill", offset_edges = T)
View(df)
View(st_d)
p<- ggplot(st_d)+
geom_sf(aes(fill = population/Shape_Are), color = NA)
plot_gg(p, height_aes = "fill", offset_edges = T)
p<- ggplot(st_d)+
geom_sf(aes(fill = population/Shape__Are), color = NA)
plot_gg(p, height_aes = "fill", offset_edges = T)
p
plot_gg(p, height_aes = "fill", offset_edges = T)
p<- ggplot(st_d)+
geom_sf(aes(fill = log(population/Shape__Are)), color = NA)
st_d<- st_d%>%
mutate(lnpopdens = log(population/Shape__Are)))
st_d<- st_d%>%
mutate(lnpopdens = log(population/Shape__Are))
geom_sf(aes(fill = lnpopdens, color = NA)
p<- ggplot(st_d)+
geom_sf(aes(fill = lnpopdens, color = NA))
p
p<- ggplot(st_d)+
geom_sf(aes(fill = lnpopdens), color = NA))
p<- ggplot(st_d)+
geom_sf(aes(fill = lnpopdens), color = NA)
p
plot_gg(p, height_aes = "fill", offset_edges = T)
render_depth(focus = 2)
plot_gg(p, height_aes = "fill", offset_edges = T)
render_depth(focus = 2)
render_depth(focus = 2, focallength = 10)
render_depth(focus = 2, focallength = 1)
render_depth(focus = 2, focallength = 1)
render_camera(theta = 90)
render_camera(theta = 90)
render_camera(theta = 0)
render_depth(focus = 2, focallength = 1)
render_camera(theta = 0, zoom = 1)
render_camera(theta = 0, zoom = 10)
render_camera(theta = 0, zoom = 0.1)
render_camera(theta = 0, zoom = 0.5)
render_depth(focus = 2, focallength = 3)
render_depth(focus = 2, focallength = 11)
render_depth(focus = 2, focallength = 1)
render_camera(theta = 0, zoom = 0.5)
render_depth(focus = 2, focallength = 1)
add_water()
p3d<- plot_gg(p, height_aes = "fill", offset_edges = T)
add_water(detect_water(p3d))
detect_water(p3d)
render_movie()
p3d<- plot_gg(p, height_aes = "fill", offset_edges = T)
render_camera(theta = 0, zoom = 0.5)
library(dplyr)
library(sf)
library(stringr)
resp<- GET("https://data.bus-data.dft.gov.uk/api/v1/datafeed/?boundingBox=-9,49,3,60&operatorRef=TFLO&lineRef=16&api_key=ae368aedf06ec8f9c978a887067434a1814aaba1")
library(shiny)
library(dplyr)
library(xml2)
library(httr)
library(leaflet)
resp<- GET("https://data.bus-data.dft.gov.uk/api/v1/datafeed/?boundingBox=-9,49,3,60&operatorRef=TFLO&lineRef=16&api_key=ae368aedf06ec8f9c978a887067434a1814aaba1")
x<- rawToChar(resp$content)%>%
read_xml()
ns<- xml_ns(x)
long<- xml_find_all(x, ".//d1:VehicleLocation/d1:Longitude", ns)%>%
xml_double()
lat<- xml_find_all(x, ".//d1:VehicleLocation/d1:Latitude", ns)%>%
xml_double()
line<- xml_find_all(x, ".//d1:LineRef", ns)%>%
xml_text()
valid<-  xml_find_all(x, ".//d1:ValidUntilTime", ns)%>%
xml_text()
departure<- xml_find_all(x, ".//d1:OriginAimedDepartureTime", ns)%>%
xml_text()
origin<- xml_find_all(x, ".//d1:OriginName", ns)%>%
xml_text()
destination<- xml_find_all(x, ".//d1:DestinationName", ns)%>%
xml_text()
published<- xml_find_all(x, ".//d1:PublishedLineName", ns)%>%
xml_text()
ref<- xml_find_all(x, ".//d1:VehicleRef", ns)%>%
xml_text()
df<- data.frame(ref = ref, lineRef = line, lineName = published, origin = origin, destination = destination, long = long, lat = lat, valid = valid)
View(df)
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
rm(list = ls())
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
resp<- GET("https://data.bus-data.dft.gov.uk/api/v1/datafeed/?boundingBox=-9,49,3,60&operatorRef=TFLO&lineRef=16&api_key=ae368aedf06ec8f9c978a887067434a1814aaba1")
resp$status_code
class(resp$status_code)
?isolate
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
?Sys.sleep()
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
shiny::runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
resp<- GET("https://data.bus-data.dft.gov.uk/api/v1/datafeed/?boundingBox=-9,49,3,60&operatorRef=TFLO&api_key=ae368aedf06ec8f9c978a887067434a1814aaba1")
resp<- GET("https://data.bus-data.dft.gov.uk/api/v1/datafeed/?boundingBox=-9,49,3,60&operatorRef=TFLO&api_key=ae368aedf06ec8f9c978a887067434a1814aaba1")
x<- rawToChar(resp$content)%>%
read_xml()
ns<- xml_ns(x)
long<- xml_find_all(x, ".//d1:VehicleLocation/d1:Longitude", ns)%>%
xml_double()
lat<- xml_find_all(x, ".//d1:VehicleLocation/d1:Latitude", ns)%>%
xml_double()
line<- xml_find_all(x, ".//d1:LineRef", ns)%>%
xml_text()
departure<- xml_find_all(x, ".//d1:OriginAimedDepartureTime", ns)%>%
xml_text()
origin<- xml_find_all(x, ".//d1:OriginName", ns)%>%
xml_text()
destination<- xml_find_all(x, ".//d1:DestinationName", ns)%>%
xml_text()
published<- xml_find_all(x, ".//d1:PublishedLineName", ns)%>%
xml_text()
ref<- xml_find_all(x, ".//d1:VehicleRef", ns)%>%
xml_text()
recorded<- xml_find_all(x, ".//d1:RecordedAtTime", ns)%>%
xml_text()
recorded<- xml_find_all(x, ".//d1:RecordedAtTime", ns)%>%
xml_text()
valid<- xml_find_all(x, ".//d1:ValidUntilTime", ns)%>%
xml_text()
direction<- xml_find_all(x, ".//d1:DirectionRef", ns)%>%
xml_text()
df<- data.frame(ref = ref, lineRef = line, lineName = published, origin = origin, destination = destination, long = long, lat = lat, recorded = recorded, valid = valid, direction = direction)
filter(df)
leaflet(df)%>%
addProviderTiles(provider = providers$CartoDB)%>%
addCircleMarkers(lng = ~long, lat = ~lat, popup = ~line)
df<- filter(df, lineName = 321)
df<- filter(df, lineName == 321)
leaflet(df)%>%
addProviderTiles(provider = providers$CartoDB)%>%
addCircleMarkers(lng = ~long, lat = ~lat, popup = ~line)
leaflet(df)%>%
addProviderTiles(provider = providers$CartoDB.DarkMatter)%>%
addCircleMarkers(lng = ~long, lat = ~lat, popup = ~line)
leaflet(df)%>%
addProviderTiles(provider = providers$CartoDB.DarkMatter)%>%
addCircleMarkers(lng = ~long, lat = ~lat, popup = ~line, fillOpacity = 0.2)
leaflet(df)%>%
addProviderTiles(provider = providers$CartoDB.DarkMatter)%>%
addCircleMarkers(lng = ~long, lat = ~lat, popup = ~line, fill = "red", fillOpacity = 0.2)
shiny::runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
shiny::runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/Downloads/test')
runApp('C:/Users/lrowley/Downloads/test')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
library(shiny)
library(dplyr)
library(xml2)
library(httr)
library(leaflet)
library(lubridate)
library(bslib)
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
shiny::runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
runApp('C:/Users/lrowley/OneDrive - University of Edinburgh/General Research/Transport Mapping/BusLocation')
load("C:/Users/lrowley/OneDrive/Documents/French Election Project/Milestone 2/Tweet Analysis/Tweet Metrics.Rda")
View(df)
load("C:/Users/lrowley/OneDrive/Documents/French Election Project/Milestone 2/Tweet Analysis/BIOID Twitter Summaries.Rda")
View(df)
load("C:/Users/lrowley/OneDrive/Documents/French Election Project/Milestone 2/Tweet Data/User data rows 1 to 1000.Rda")
View(all_users)
rm(list = ls())
library(jsonlite)
library(dplyr)
library(writexl)
library(here)
setwd(here())
rm(list = ls())
setwd("C:/Users/lrowley/OneDrive/Documents/French Election Project/Milestone 3")
